/**
 * 快速幂
 * 
 * 1. 2^5 = 2 * ((((2)^2)^2)^2)^2
 * 2. 由上，x 一直乘以 x, 相当于 n 每次除以 2
 * 4. 2^-3 相当于 1/2 的 3 次方
 * 
 * 快速幂算法的核心思想是把指数 n 用二进制形式表示。
 * 比如，若要计算 x^13，指数 13 的二进制是 1101，13 = x^3 + x^2 + x^0 （注意：二进制第二位对应的 0，不存在指数的相加因子）
 * 那么，x^13 可以写成：x^(2^3 + 2^2 + 2^0)，即 x^(8 + 4 + 1)，，进一步转换：x^2^3 * x^2^2 * x^2^0，
 * 这也是为什么 n 右移之后，如果最后一位是 1，才会将累计 x 并入 r
 * n 用来过滤指数乘积因子
 */


function myPow(x: number, n: number): number {
  // 边界
  if (x === 0) return 0;

  let r = 1;

  // n 为负数，转换为 (1/x)^(-n)
  if (n < 0) {
    x = 1 / x;
    n = -n;
  }

  // 循环，n 不断除以 2
  while (n > 0) {
    /**
     * n & 1 === 1 判断奇数
     * 奇数，需要将剩余的 x 乘入 r
     */
    if ((n & 1) === 1) r *= x;

    // x 不断的乘以 x
    x *= x;
    // 无符号右移，相当于 Math.floor(n / 2)
    n >>>= 1;
  }

  return r;
}

// const r = myPow(2.00000, -2); // 0.25
// const r = myPow(2.00000, -2147483648); // 0
// const r = myPow(2.00000, 5); // 32
const r = myPow(2.00000, 4); // 16
console.log(r);

export { }
